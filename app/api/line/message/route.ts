import { NextResponse } from "next/server";
import { validateEnv } from "@/lib/env";
import axios from "axios";

export async function POST(req: Request) {
  try {
    // Validate environment variables
    validateEnv();
    
    // Parse request body
    const body = await req.json();
    const { userId, modelName, modelId, price } = body;
    
    if (!userId || !modelName) {
      return NextResponse.json({ error: "Missing required parameters" }, { status: 400 });
    }
    
    // Create welcome message
    const welcomeMessage = `
‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå BYD ${modelName}

üöó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à:
- ‡∏£‡∏∏‡πà‡∏ô: ${modelName}
- ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${price.toLocaleString()} ‡∏ö‡∏≤‡∏ó

‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡∏ö
    `.trim();

    // Send message to user
    await axios({
      method: 'post',
      url: 'https://api.line.me/v2/bot/message/push',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
      },
      data: {
        to: userId,
        messages: [{
          type: 'text',
          text: welcomeMessage
        }]
      },
      timeout: 10000 // 10 second timeout
    });
    
    // Also notify admin
    await axios({
      method: 'post',
      url: 'https://api.line.me/v2/bot/message/push',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
      },
      data: {
        to: process.env.LINE_USER_ID,
        messages: [{
          type: 'text',
          text: `üîî ‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏£‡∏ñ ${modelName} ‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö LINE Login\nLINE ID: ${userId}`
        }]
      }
    });
    
    return NextResponse.json({ success: true });
    
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error('LINE Message Error:', errorMessage);
    
    return NextResponse.json({ 
      error: "Failed to send LINE message",
      details: process.env.NODE_ENV === 'development' ? errorMessage : undefined
    }, { 
      status: 500 
    });
  }
}