import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';

export async function POST(request: Request) {
  try {
    const data = await request.json();
    const cookieStore = cookies();
    const lineUserId = cookieStore.get('line_user_id')?.value;
    
    if (!lineUserId) {
      return NextResponse.json(
        { success: false, error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Line' },
        { status: 400 }
      );
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Line
    const messageText = createMessageText(data);
    
    const message = {
      to: lineUserId,
      messages: [
        {
          type: 'text',
          text: messageText
        }
      ]
    };
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Line Messaging API
    const response = await fetch('https://api.line.me/v2/bot/message/push', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`
      },
      body: JSON.stringify(message)
    });
    
    if (response.ok) {
      return NextResponse.json({ success: true });
    } else {
      const lineResponse = await response.json();
      return NextResponse.json(
        { success: false, error: lineResponse },
        { status: response.status }
      );
    }
  } catch (error) {
    console.error('Send Line message error:', error);
    return NextResponse.json(
      { success: false, error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°' },
      { status: 500 }
    );
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Line
function createMessageText(data: any): string {
  let message = 'üöó ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå BYD\n\n';
  
  if (data.modelName) {
    message += `üìã ‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à: ${data.modelName}\n`;
  }
  
  if (data.price) {
    message += `üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${data.price.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n`;
  }
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
  if (data.customer) {
    message += '\nüìû ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:\n';
    if (data.customer.name) message += `‡∏ä‡∏∑‡πà‡∏≠: ${data.customer.name}\n`;
    if (data.customer.phone) message += `‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${data.customer.phone}\n`;
    if (data.customer.email) message += `‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${data.customer.email}\n`;
    if (data.customer.preferredContact) message += `‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ${data.customer.preferredContact}\n`;
  }
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à
  if (data.interest) {
    message += '\nüîç ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à:\n';
    if (data.interest.testDrive) message += '‚úÖ ‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏Ç‡∏±‡∏ö\n';
    if (data.interest.financing) message += '‚úÖ ‡∏™‡∏ô‡πÉ‡∏à‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏ü‡πÅ‡∏ô‡∏ô‡∏ã‡πå\n';
    if (data.interest.tradeIn) message += '‚úÖ ‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏£‡∏ñ\n';
    if (data.interest.color) message += `‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à: ${data.interest.color}\n`;
    if (data.interest.comments) message += `‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${data.interest.comments}\n`;
  }
  
  message += '\n‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î';
  
  return message;
} 