import { NextRequest, NextResponse } from "next/server";

const LINE_CHANNEL_ACCESS_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN;
const LINE_ADMIN_USER_ID = process.env.LINE_ADMIN_USER_ID;

// Rate limiting: ‡πÄ‡∏Å‡πá‡∏ö IP addresses ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
const rateLimitMap = new Map<string, number[]>();
const RATE_LIMIT_WINDOW = 60 * 1000; // 1 ‡∏ô‡∏≤‡∏ó‡∏µ
const MAX_REQUESTS_PER_WINDOW = 3; // ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏ô‡∏≤‡∏ó‡∏µ

// Input validation ‡πÅ‡∏•‡∏∞ sanitization
function validateAndSanitizeInput(data: any) {
	const { name, email, phone, subject, message } = data;

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
	if (name && name.length > 100) return { error: "‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ" };
	if (email && email.length > 100) return { error: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ" };
	if (phone && phone.length > 20) return { error: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ" };
	if (subject && subject.length > 200) return { error: "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ" };
	if (message && message.length > 1000) return { error: "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ" };

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
	if (email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
		return { error: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" };
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
	if (phone && !/^[0-9+\-\s()]{8,20}$/.test(phone)) {
		return { error: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" };
	}

	// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô XSS ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏ö HTML tags
	const sanitize = (str: string) => str?.replace(/<[^>]*>/g, "").trim() || "";

	return {
		name: sanitize(name),
		email: sanitize(email),
		phone: sanitize(phone),
		subject: sanitize(subject),
		message: sanitize(message),
	};
}

function checkRateLimit(ip: string): boolean {
	const now = Date.now();
	const requests = rateLimitMap.get(ip) || [];

	// ‡∏•‡∏ö requests ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ window
	const validRequests = requests.filter(
		(time) => now - time < RATE_LIMIT_WINDOW
	);

	if (validRequests.length >= MAX_REQUESTS_PER_WINDOW) {
		return false; // ‡πÄ‡∏Å‡∏¥‡∏ô rate limit
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏° request ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
	validRequests.push(now);
	rateLimitMap.set(ip, validRequests);

	return true;
}

async function sendToLineOA({ name, email, phone, subject, message }: any) {
	if (!LINE_CHANNEL_ACCESS_TOKEN || !LINE_ADMIN_USER_ID) {
		console.error("LINE env not set");
		return false;
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp
	const timestamp = new Date().toLocaleString("th-TH", {
		timeZone: "Asia/Bangkok",
		year: "numeric",
		month: "2-digit",
		day: "2-digit",
		hour: "2-digit",
		minute: "2-digit",
	});

	const flexMessage = {
		type: "flex",
		altText: "Contact Us Message",
		contents: {
			type: "bubble",
			header: {
				type: "box",
				layout: "vertical",
				contents: [
					{
						type: "text",
						text: "üì© ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Contact Us",
						weight: "bold",
						size: "lg",
						color: "#1DB446",
					},
					{
						type: "text",
						text: `üïê ${timestamp}`,
						size: "sm",
						color: "#666666",
					},
				],
				backgroundColor: "#f8f9fa",
			},
			body: {
				type: "box",
				layout: "vertical",
				contents: [
					{ type: "text", text: `üë§ ‡∏ä‡∏∑‡πà‡∏≠: ${name || "-"}` },
					{ type: "text", text: `üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${phone || "-"}` },
					{ type: "text", text: `üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${email || "-"}` },
					{ type: "text", text: `üìù ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${subject || "-"}` },
					{ type: "text", text: `üí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${message || "-"}` },
				],
			},
		},
	};

	try {
		const res = await fetch("https://api.line.me/v2/bot/message/push", {
			method: "POST",
			headers: {
				Authorization: `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`,
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				to: LINE_ADMIN_USER_ID,
				messages: [flexMessage],
			}),
		});

		if (!res.ok) {
			console.error("LINE API Error:", res.status, res.statusText);
			return false;
		}

		return true;
	} catch (error) {
		console.error("Error sending to LINE:", error);
		return false;
	}
}

export async function POST(req: NextRequest) {
	try {
		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö rate limit
		const ip =
			req.headers.get("x-forwarded-for") ||
			req.headers.get("x-real-ip") ||
			"unknown";
		if (!checkRateLimit(ip)) {
			return NextResponse.json(
				{ error: "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà" },
				{ status: 429 }
			);
		}

		const body = await req.json();

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
		if (!body || typeof body !== "object") {
			return NextResponse.json({ error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }, { status: 400 });
		}

		// Validate ‡πÅ‡∏•‡∏∞ sanitize input
		const validationResult = validateAndSanitizeInput(body);
		if ("error" in validationResult) {
			return NextResponse.json(
				{ error: validationResult.error },
				{ status: 400 }
			);
		}

		const { name, email, phone, subject, message } = validationResult;

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
		if (!name && !email && !phone && !message) {
			return NextResponse.json(
				{ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ä‡πà‡∏≠‡∏á" },
				{ status: 400 }
			);
		}

		const sent = await sendToLineOA({ name, email, phone, subject, message });
		if (!sent) {
			return NextResponse.json(
				{ error: "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà" },
				{ status: 500 }
			);
		}

		return NextResponse.json({ success: true });
	} catch (e) {
		console.error("API Error:", e);
		return NextResponse.json(
			{ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö" },
			{ status: 500 }
		);
	}
}

export async function GET() {
	return NextResponse.json({ error: "Method not allowed" }, { status: 405 });
}
